<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Programming on Notes from the digital underground by Lngnmn</title>
    <link>https://lngnmn2.github.io/categories/programming/</link>
    <description>Recent content in Programming on Notes from the digital underground by Lngnmn</description>
    <generator>Hugo -- 0.124.1</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Apr 2024 20:58:17 +0545</lastBuildDate>
    <atom:link href="https://lngnmn2.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to program</title>
      <link>https://lngnmn2.github.io/articles/how-to-program/</link>
      <pubDate>Sun, 28 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/how-to-program/</guid>
      <description>oops, I did it again.</description>
    </item>
    <item>
      <title>Teach Yourself programming like Peter Norvig</title>
      <link>https://lngnmn2.github.io/articles/teach-yourself/</link>
      <pubDate>Sun, 28 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/teach-yourself/</guid>
      <description>Classy principle-guided online learning.</description>
    </item>
    <item>
      <title>Tackling complexity</title>
      <link>https://lngnmn2.github.io/articles/tackling-complexity/</link>
      <pubDate>Fri, 26 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/tackling-complexity/</guid>
      <description>Let some HN Chuds read this.</description>
    </item>
    <item>
      <title>The targets no one else sees</title>
      <link>https://lngnmn2.github.io/articles/targets/</link>
      <pubDate>Fri, 26 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/targets/</guid>
      <description>Yet another article for HN Chuds</description>
    </item>
    <item>
      <title>Everything in Emacs</title>
      <link>https://lngnmn2.github.io/articles/everything-in-emacs/</link>
      <pubDate>Wed, 24 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/everything-in-emacs/</guid>
      <description>  The monument and a world-heritage &amp;#34;site&amp;#34;.
  </description>
    </item>
    <item>
      <title>Rust is like Haskell, but imperative</title>
      <link>https://lngnmn2.github.io/articles/like-haskell-but-imperative/</link>
      <pubDate>Wed, 24 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/like-haskell-but-imperative/</guid>
      <description>  The monument and a world-heritage &amp;#34;site&amp;#34;.
  </description>
    </item>
    <item>
      <title>The lost art of using a language</title>
      <link>https://lngnmn2.github.io/articles/art-forms/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/art-forms/</guid>
      <description>Everything spoken or written has to be a form of an art.</description>
    </item>
    <item>
      <title>All you need is…</title>
      <link>https://lngnmn2.github.io/articles/all-you-need/</link>
      <pubDate>Sun, 29 Oct 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/all-you-need/</guid>
      <description>Hold it without an effort, and it will come to you without an end.</description>
    </item>
    <item>
      <title>Why not OOP</title>
      <link>https://lngnmn2.github.io/articles/why-not-oop/</link>
      <pubDate>Sat, 21 Oct 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/why-not-oop/</guid>
      <description>It&amp;#39;s time to backtrack and prune.</description>
    </item>
    <item>
      <title>Never leave Emacs</title>
      <link>https://lngnmn2.github.io/articles/never-leave-emacs/</link>
      <pubDate>Tue, 17 Oct 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/never-leave-emacs/</guid>
      <description>How to partially overcome our cognitive deficiencies.</description>
    </item>
    <item>
      <title>The right way</title>
      <link>https://lngnmn2.github.io/articles/the-right-way/</link>
      <pubDate>Sun, 15 Oct 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/the-right-way/</guid>
      <description>How to program instead of doing a webshit coding</description>
    </item>
    <item>
      <title>Solving async-await for Rust</title>
      <link>https://lngnmn2.github.io/articles/async-rust/</link>
      <pubDate>Fri, 06 Oct 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/async-rust/</guid>
      <description>So, you want to add these ~async~/~await/ keywords?
First of all, it has already been seriously researched by the C#/F# .NET guys. Just learn what they have come up with.
One&amp;rsquo;s own principle-guided reasoning could proceed like this:
The fundamental difference between ordinary procedures and async procedures is the whole protocol for calling and returning of values, and dealing with actual implementation of the corresponding mechanisms (abstract at this point, but has to reuse what is already out there).</description>
    </item>
    <item>
      <title>High Level</title>
      <link>https://lngnmn2.github.io/articles/high-level/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/high-level/</guid>
      <description>I finally found a well-written no-bullshit book about CS. It says, among other things:
There is no need to define a representation of the values False and True in terms of values of some other type.
Conceptually, values of type Bool are simply (denoted by) the expressions False and True.
Of course, the computer’s internal representation of Bool and all other data is in terms of bits, but we don’t need to know any of the details of how that works to write programs.</description>
    </item>
    <item>
      <title>The Junk Foods of Programming</title>
      <link>https://lngnmn2.github.io/articles/junk-food/</link>
      <pubDate>Tue, 03 Oct 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/junk-food/</guid>
      <description>A small disclaimer: I&amp;rsquo;ve lived in India for a few years, I have some good friends there and I think I begin to really understand the some cultural aspects which govern this vastly complex and spontaneous society.
Nowadays everyone, it seems, is either a programmer or an AI researcher or both. When they are not a crapto &amp;ldquo;engineers&amp;rdquo;, of course.
Just like chef Gusteau from the Ratatouille movie famously proclaimed &amp;ndash; &amp;ldquo;Anyone can cook&amp;rdquo;.</description>
    </item>
    <item>
      <title>More Whys</title>
      <link>https://lngnmn2.github.io/articles/more-whys/</link>
      <pubDate>Fri, 29 Sep 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/more-whys/</guid>
      <description>Have you ever thought why the Set Theory and Predicate Logic looks &amp;ldquo;the same&amp;rdquo; when being visualized using Venn and Euler diagrams?
Are these partitions is the most fundamental abstract building block?
Most of the examples which are used to explain logic has been drawn from &amp;ldquo;natural categories&amp;rdquo; of biological species - mammals, reptiles, men.
These are distinct partitions indeed, but how they came to be as they are?
It is because somewhere in the past a literal &amp;ldquo;fork&amp;rdquo;, a mutation (or a whole set of these) occurred (and the resulting population survived).</description>
    </item>
    <item>
      <title>The Way</title>
      <link>https://lngnmn2.github.io/articles/the-way/</link>
      <pubDate>Mon, 25 Sep 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/the-way/</guid>
      <description>  A breadth-first search for &amp;#34;enlightenment&amp;#34;.
  </description>
    </item>
    <item>
      <title>Notes on proper abstractions and ADTs</title>
      <link>https://lngnmn2.github.io/articles/prog1/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/prog1/</guid>
      <description>Special concern for precise definitions, clarity and brevity (omitting of what is clear from the context), high level of abstraction, and proper generality (just like Sets or Numbers).
Both algebraic types (&amp;ldquo;products&amp;rdquo; and &amp;ldquo;sums&amp;rdquo;), could be used &amp;ldquo;like tables&amp;rdquo;, with new columns being added without affecting any code that is already out there.
This implies a by name instead of position-based (offset) access.
This, in turn, is the fundamental, definitive property of structs over tuples.</description>
    </item>
    <item>
      <title>LLMS For Coding</title>
      <link>https://lngnmn2.github.io/articles/llms-for-coding/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/llms-for-coding/</guid>
      <description>Today https://news.ycombinator.com/ is glowing bright with AI memes and buzzwords like a Christmas tree. Everyone is there, including billion dollar corporations announcing a &amp;ldquo;CodeLama-34b&amp;rdquo; which is &amp;ldquo;designed for general code synthesis and understanding.&amp;rdquo;
First of all, I personaly do not want to rely in any part of my life on any &amp;ldquo;synthesized&amp;rdquo; (and &amp;ldquo;understood&amp;rdquo; software, and demand an explicit opt-out. Yes, yes, I know.
If I have any understanding of these subjects at all, this is a bubble and irrational exuberance.</description>
    </item>
    <item>
      <title>On burnout</title>
      <link>https://lngnmn2.github.io/articles/burnout/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/burnout/</guid>
      <description>What is to be done.</description>
    </item>
    <item>
      <title>Abstraction barriers</title>
      <link>https://lngnmn2.github.io/articles/abstractions/</link>
      <pubDate>Fri, 04 Aug 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/abstractions/</guid>
      <description>Interfaces, interfaces everywhere.</description>
    </item>
    <item>
      <title>GNU Emacs</title>
      <link>https://lngnmn2.github.io/articles/emacs/</link>
      <pubDate>Fri, 28 Jul 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/emacs/</guid>
      <description>  The monument and a world-heritage &amp;#34;site&amp;#34;.
  </description>
    </item>
    <item>
      <title>Writing a semi-automated trading system</title>
      <link>https://lngnmn2.github.io/articles/automated-trading/</link>
      <pubDate>Fri, 28 Jul 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/automated-trading/</guid>
      <description>AUTHOR: &amp;lt;lngnmn2@yahoo.com&amp;gt;
Writing a semi-automated trading system is easy - just ask John Carmack to write it down for you.
Before that Eric Evans has to extract the domain knowledge using his DDD approach, and then some top mathematician, or maybe Bartosz Milewski, would build a consistent model from it.
Maybe it is even better to rather ask Simon Peyton Jones to write a matching engine, so you will have it pure-functional, with the most important parts formally proven in Coq (and then translated into Haskell code).</description>
    </item>
    <item>
      <title>The recurring patterns captured as a Monoid</title>
      <link>https://lngnmn2.github.io/articles/monoids/</link>
      <pubDate>Sun, 16 Jul 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/monoids/</guid>
      <description>The common patterns There are recurrent patterns, which has been captured in familiar &amp;ldquo;standard&amp;rdquo; abstractions.
Monoid A Set along with a composition operation, which has an identity element.
addition, for (+) identity is 0 concatenation, which is a specialization of putting together, identity is &amp;quot;&amp;quot;. List, a fundamental recursive sum-type, identity is [] Option, a specialization of empty/non-empty aspect of a List, identity is None Boolean logic, very subtle, identity is False (false imply nothing) The notion that some Boolean operations form a Monoid is very subtle, but it will emerge with conditional expressions.</description>
    </item>
    <item>
      <title>Understanding Rust</title>
      <link>https://lngnmn2.github.io/articles/unrestanding-rust/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/unrestanding-rust/</guid>
      <description>The Rust programming language has been hyped as a system programming language, which implies that it has to have an explicit &amp;ldquo;access&amp;rdquo; to the hardware-level abstractions, such as the Stack, the Heap and the Procedures, together with the operating system-level abstractions, such as following the particular calling conventions (a set of standardized interfaces) for an &amp;ldquo;arch and OS /duo&amp;rdquo;, and to be &amp;ldquo;aware of&amp;rdquo; the ABIs in general.
Overview Rust is, in principle, an imperative language.</description>
    </item>
    <item>
      <title>The simplest self-publishing workflow</title>
      <link>https://lngnmn2.github.io/articles/the-simplest-workflow/</link>
      <pubDate>Thu, 13 Jul 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/the-simplest-workflow/</guid>
      <description>Overview This is the simplest but smart self-publishing workflow.
org-mode -&amp;gt; ox_hugo -&amp;gt; hugo -&amp;gt; static html -&amp;gt; git commit -a -&amp;gt; git push -&amp;gt; github pages
Everything is according to the universal principles of being almost &amp;ldquo;pure functional transformations&amp;rdquo; of a structured and decorated text, together with version control, which provides sort of immutability (of the previous versions).
At each stage or step we delegate some aspect to an appropriate external vendored tool.</description>
    </item>
  </channel>
</rss>
