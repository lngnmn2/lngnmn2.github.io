<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rust on Notes from the digital underground by Lngnmn</title>
    <link>https://lngnmn2.github.io/tags/rust/</link>
    <description>Recent content in rust on Notes from the digital underground by Lngnmn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Jul 2023 00:00:00 +0545</lastBuildDate><atom:link href="https://lngnmn2.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Rust</title>
      <link>https://lngnmn2.github.io/articles/unrestanding-rust/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 +0545</pubDate>
      
      <guid>https://lngnmn2.github.io/articles/unrestanding-rust/</guid>
      <description>The Rust programming language has been hyped as a system programming language, which implies that it has to have an explicit &amp;ldquo;access&amp;rdquo; to the hardware-level abstractions, such as the Stack, the Heap and the Procedures, together with the operating system-level abstractions, such as following the particular calling conventions (a set of standardized interfaces) for an &amp;ldquo;arch and OS /duo&amp;rdquo;, and to be &amp;ldquo;aware of&amp;rdquo; the ABIs in general.
Overview Rust is, in principle, an imperative language.</description>
    </item>
    
  </channel>
</rss>
