<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DSL on Notes from the digital underground by Lngnmn</title>
    <link>https://lngnmn2.github.io/tags/dsl/</link>
    <description>Recent content in DSL on Notes from the digital underground by Lngnmn</description>
    <generator>Hugo -- 0.147.7</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Aug 2025 11:25:22 +0545</lastBuildDate>
    <atom:link href="https://lngnmn2.github.io/tags/dsl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programming Before AI</title>
      <link>https://lngnmn2.github.io/articles/programming-before-ai/</link>
      <pubDate>Mon, 11 Aug 2025 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/programming-before-ai/</guid>
      <description>&lt;p&gt;I have to rush to finish my series before AI will completely enshittificate the written knowledge and the classic discipline of programming, which is based on understanding and mathematical rigour.&lt;/p&gt;
&lt;p&gt;Yes, I seemingly overuse this word beyond the limits of a good style, but I like it, how it is awkward and ugly and yet perfectly captures what a generative AI is doing to a writtern knowledge itself.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s try to build it all top-down, for a change. Bottom up is probably the better way, but it takes so long time before one begins to see the whole picture, which is, of course, the one and the same mountain (or an elephant) viewed from different angles and perspectives.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming solved (again)</title>
      <link>https://lngnmn2.github.io/articles/programming-solved-again/</link>
      <pubDate>Thu, 03 Jul 2025 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/programming-solved-again/</guid>
      <description>Oops, I did it again</description>
    </item>
    <item>
      <title>Systematic testing and non-bulshit TTD</title>
      <link>https://lngnmn2.github.io/articles/testing-and-ttd/</link>
      <pubDate>Mon, 09 Jun 2025 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/testing-and-ttd/</guid>
      <description>&lt;p&gt;Testing interacts with your dopamine system, so you will a small &lt;em&gt;yay!&lt;/em&gt; every time all tests passed. This is crucial, because motivation tend to decays exponentially and to experience inevitable &amp;ldquo;crashes&amp;rdquo; after spikes.&lt;/p&gt;
&lt;p&gt;TTD is sort of a direct consequence of &lt;em&gt;type-driven&lt;/em&gt; (or &amp;ldquo;types first&amp;rdquo;) approach to prototyping.&lt;/p&gt;
&lt;p&gt;Ideally, each type is associated  (in an one-to-one correspondence) with each &lt;em&gt;distinct concept&lt;/em&gt; in the problem domain, at an appropriate &lt;em&gt;level of abstraction&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Coding LLM failures</title>
      <link>https://lngnmn2.github.io/articles/coding-llm-failures/</link>
      <pubDate>Sun, 08 Jun 2025 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/coding-llm-failures/</guid>
      <description>&lt;p&gt;Maybe it is time to settle this discurse once and for all, and move on.&lt;/p&gt;
&lt;p&gt;Recently I asked Deepseek (otherwise amazing), Grok (a meme) and Gemini about idiomatic way of enabling syntax  highlighting in blocks of code, which may appear in an &lt;code&gt;eww&lt;/code&gt; or &lt;code&gt;nov&lt;/code&gt; modes.&lt;/p&gt;
&lt;p&gt;What they all give me is some stylized pasta from &lt;em&gt;StackOverflow&lt;/em&gt; and &lt;em&gt;Github&lt;/em&gt;  about &lt;code&gt;polymode&lt;/code&gt; and &lt;code&gt;mmm-mode&lt;/code&gt; and how to use &lt;em&gt;regexps&lt;/em&gt; to find particular blocks and to apply some low-level function on a range.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Syntax</title>
      <link>https://lngnmn2.github.io/articles/syntax/</link>
      <pubDate>Wed, 04 Jun 2025 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/syntax/</guid>
      <description>Lets solve it just for kicks</description>
    </item>
    <item>
      <title>The Process</title>
      <link>https://lngnmn2.github.io/articles/the-process/</link>
      <pubDate>Tue, 22 Apr 2025 20:14:06 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/the-process/</guid>
      <description>&lt;p&gt;DATE:  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2025-04-22 Tue&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A lot in common with cooking, which is (arguably) the simplest and the most ancient form of &lt;em&gt;engineering&lt;/em&gt;. (TODO: explain with examples). No one can learn to cook by watching a &amp;ldquo;food porn&amp;rdquo; on social networks. It is a &amp;ldquo;learn-by-doing (and making mistakes)&amp;rdquo; process.&lt;/p&gt;
&lt;p&gt;Small, &lt;em&gt;complete&lt;/em&gt; (Always Be Compiled) iterations, which conceptually corresponds to &amp;ldquo;recursive calls&amp;rdquo; of a spiral-shaped recursive process, which ends up at (converges to) a &lt;em&gt;local optimum&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The C Legacy</title>
      <link>https://lngnmn2.github.io/articles/the-c-legacy/</link>
      <pubDate>Mon, 17 Mar 2025 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/the-c-legacy/</guid>
      <description>My 5c</description>
    </item>
    <item>
      <title>Python is already won</title>
      <link>https://lngnmn2.github.io/articles/python-won/</link>
      <pubDate>Thu, 06 Mar 2025 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/python-won/</guid>
      <description>here is how to catch up.</description>
    </item>
    <item>
      <title>How To Program 3</title>
      <link>https://lngnmn2.github.io/articles/how-to-program-3/</link>
      <pubDate>Sun, 23 Feb 2025 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/how-to-program-3/</guid>
      <description>I am getting old and keep forgetting things I have found out.</description>
    </item>
    <item>
      <title>Structural pattens</title>
      <link>https://lngnmn2.github.io/articles/structural-patterns/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/structural-patterns/</guid>
      <description>  Clarifying the &amp;#34;design patterns&amp;#34; bullshit
  </description>
    </item>
    <item>
      <title>On Python</title>
      <link>https://lngnmn2.github.io/articles/python/</link>
      <pubDate>Sat, 25 May 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/python/</guid>
      <description>No Royal Road to programming.</description>
    </item>
    <item>
      <title>Going full Steppenwolf</title>
      <link>https://lngnmn2.github.io/articles/going-full-steppenwolf/</link>
      <pubDate>Thu, 16 May 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/going-full-steppenwolf/</guid>
      <description>Which I already did</description>
    </item>
    <item>
      <title>On complexity</title>
      <link>https://lngnmn2.github.io/articles/complexity/</link>
      <pubDate>Tue, 14 May 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/complexity/</guid>
      <description>DDD, TDD and the rest of em.</description>
    </item>
    <item>
      <title>Why monads?</title>
      <link>https://lngnmn2.github.io/articles/why-monads/</link>
      <pubDate>Sat, 04 May 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/why-monads/</guid>
      <description>How to program III</description>
    </item>
    <item>
      <title>How to program II</title>
      <link>https://lngnmn2.github.io/articles/how-to-program-2/</link>
      <pubDate>Fri, 03 May 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/how-to-program-2/</guid>
      <description>oops, I did it again.</description>
    </item>
    <item>
      <title>Die Hard</title>
      <link>https://lngnmn2.github.io/articles/die-hard/</link>
      <pubDate>Tue, 30 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/die-hard/</guid>
      <description>Another writing for HN Chuddies</description>
    </item>
    <item>
      <title>How to program</title>
      <link>https://lngnmn2.github.io/articles/how-to-program/</link>
      <pubDate>Sun, 28 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/how-to-program/</guid>
      <description>oops, I did it again.</description>
    </item>
    <item>
      <title>Teach Yourself programming like Peter Norvig</title>
      <link>https://lngnmn2.github.io/articles/teach-yourself/</link>
      <pubDate>Sun, 28 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/teach-yourself/</guid>
      <description>Classy principle-guided online learning.</description>
    </item>
    <item>
      <title>Tackling complexity</title>
      <link>https://lngnmn2.github.io/articles/tackling-complexity/</link>
      <pubDate>Fri, 26 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/tackling-complexity/</guid>
      <description>Let some HN Chuds read this.</description>
    </item>
    <item>
      <title>The targets no one else sees</title>
      <link>https://lngnmn2.github.io/articles/targets/</link>
      <pubDate>Fri, 26 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/targets/</guid>
      <description>Yet another article for HN Chuds</description>
    </item>
    <item>
      <title>Everything in Emacs</title>
      <link>https://lngnmn2.github.io/articles/everything-in-emacs/</link>
      <pubDate>Wed, 24 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/everything-in-emacs/</guid>
      <description>  The monument and a world-heritage &amp;#34;site&amp;#34;.
  </description>
    </item>
    <item>
      <title>Rust is like Haskell, but imperative</title>
      <link>https://lngnmn2.github.io/articles/like-haskell-but-imperative/</link>
      <pubDate>Wed, 24 Apr 2024 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/like-haskell-but-imperative/</guid>
      <description>  The monument and a world-heritage &amp;#34;site&amp;#34;.
  </description>
    </item>
    <item>
      <title>All you need is…</title>
      <link>https://lngnmn2.github.io/articles/all-you-need/</link>
      <pubDate>Sun, 29 Oct 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/all-you-need/</guid>
      <description>Hold it without an effort, and it will come to you without an end.</description>
    </item>
    <item>
      <title>The right way</title>
      <link>https://lngnmn2.github.io/articles/the-right-way/</link>
      <pubDate>Sun, 15 Oct 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/the-right-way/</guid>
      <description>How to program instead of doing a webshit coding</description>
    </item>
    <item>
      <title>High Level</title>
      <link>https://lngnmn2.github.io/articles/high-level/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/high-level/</guid>
      <description>&lt;p&gt;I finally found a well-written no-bullshit book about CS. It says, among other things:&lt;/p&gt;
&lt;p&gt;There is no need to define a representation of the values &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt; in terms of values of some other type.&lt;/p&gt;
&lt;p&gt;Conceptually, values of type &lt;code&gt;Bool&lt;/code&gt; are simply (denoted by) the expressions &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, the computer’s internal &lt;em&gt;representation&lt;/em&gt; of &lt;code&gt;Bool&lt;/code&gt; and all other data is in terms of bits, but &lt;strong&gt;we don’t need to know any of the details of how that works to write programs&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Junk Foods of Programming</title>
      <link>https://lngnmn2.github.io/articles/junk-food/</link>
      <pubDate>Tue, 03 Oct 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/junk-food/</guid>
      <description>&lt;p&gt;A small disclaimer: I&amp;rsquo;ve lived in India for a few years, I have some good friends there and I think I &lt;em&gt;begin&lt;/em&gt; to really understand the some cultural aspects which govern this vastly complex and spontaneous society.&lt;/p&gt;
&lt;p&gt;Nowadays everyone, it seems, is either a programmer or an AI researcher or both. When they are not a &lt;em&gt;crapto&lt;/em&gt; &amp;ldquo;engineers&amp;rdquo;, of course.&lt;/p&gt;
&lt;p&gt;Just like chef &lt;em&gt;Gusteau&lt;/em&gt; from the &lt;em&gt;Ratatouille&lt;/em&gt; movie famously proclaimed &amp;ndash; &lt;em&gt;&amp;ldquo;Anyone can cook&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GNU Emacs</title>
      <link>https://lngnmn2.github.io/articles/emacs/</link>
      <pubDate>Fri, 28 Jul 2023 00:00:00 +0545</pubDate>
      <guid>https://lngnmn2.github.io/articles/emacs/</guid>
      <description>  The monument and a world-heritage &amp;#34;site&amp;#34;.
  </description>
    </item>
  </channel>
</rss>
