<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Articles on Notes from the digital underground by Lngnmn</title>
    <link>https://lngnmn2.github.io/articles/</link>
    <description>Recent content in Articles on Notes from the digital underground by Lngnmn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Aug 2023 00:00:00 +0545</lastBuildDate><atom:link href="https://lngnmn2.github.io/articles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trading</title>
      <link>https://lngnmn2.github.io/articles/trading/</link>
      <pubDate>Wed, 09 Aug 2023 00:00:00 +0545</pubDate>
      
      <guid>https://lngnmn2.github.io/articles/trading/</guid>
      <description>Extracting the principles and the whys.</description>
    </item>
    
    <item>
      <title>Why S and K are enough.</title>
      <link>https://lngnmn2.github.io/articles/sk/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0545</pubDate>
      
      <guid>https://lngnmn2.github.io/articles/sk/</guid>
      <description>DESCRIPTION: Oops, I did it again.
The hack The word &amp;ldquo;implies&amp;rdquo; and corresponding arrows are grossly overloaded and have more than one subtle but distinct meanings.
We will read and interpret the &amp;ldquo;arrows&amp;rdquo; (and the word &amp;ldquo;implies&amp;rdquo;) from different formalisms differently (as an implication in terms of necessity and sufficiency and as a single discrete step of causality).
We will put the universal notion of an environment (and the corresponding Î“ abstraction) from obscurity to the center.</description>
    </item>
    
    <item>
      <title>Abstraction barriers</title>
      <link>https://lngnmn2.github.io/articles/abstractions/</link>
      <pubDate>Fri, 04 Aug 2023 00:00:00 +0545</pubDate>
      
      <guid>https://lngnmn2.github.io/articles/abstractions/</guid>
      <description>Interfaces, interfaces everywhere.</description>
    </item>
    
    <item>
      <title>GNU Emacs</title>
      <link>https://lngnmn2.github.io/articles/emacs/</link>
      <pubDate>Fri, 28 Jul 2023 00:00:00 +0545</pubDate>
      
      <guid>https://lngnmn2.github.io/articles/emacs/</guid>
      <description>  The monument and a world-heritage &amp;#34;site&amp;#34;.
  </description>
    </item>
    
    <item>
      <title>Biological evolution and Life Itself</title>
      <link>https://lngnmn2.github.io/articles/life-itself/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0545</pubDate>
      
      <guid>https://lngnmn2.github.io/articles/life-itself/</guid>
      <description>Stable intermediate building blocks.</description>
    </item>
    
    <item>
      <title>Remote</title>
      <link>https://lngnmn2.github.io/articles/remote/</link>
      <pubDate>Fri, 21 Jul 2023 00:00:00 +0545</pubDate>
      
      <guid>https://lngnmn2.github.io/articles/remote/</guid>
      <description>Practices that work.</description>
    </item>
    
    <item>
      <title>Foundations</title>
      <link>https://lngnmn2.github.io/articles/foundations/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0545</pubDate>
      
      <guid>https://lngnmn2.github.io/articles/foundations/</guid>
      <description>Stupid people would usually ask &amp;ldquo;why do we need all this theoretical bullshit and abstracted theories&amp;rdquo;?
The answer is, to have &amp;ldquo;the right understanding&amp;rdquo; and because of that to be able to do things &amp;ldquo;just right&amp;rdquo;.
&amp;ldquo;Just right&amp;rdquo; has many meanings and implications. Among other things it is that what has been &amp;ldquo;done right&amp;rdquo; (ideally &amp;ndash; a local optimum) does not require any further modifications.
It was indeed &amp;ldquo;done&amp;rdquo; (right). There is nothing more to remove (or alter).</description>
    </item>
    
    <item>
      <title>The recurring patterns captured as a Monoid</title>
      <link>https://lngnmn2.github.io/articles/monoids/</link>
      <pubDate>Sun, 16 Jul 2023 00:00:00 +0545</pubDate>
      
      <guid>https://lngnmn2.github.io/articles/monoids/</guid>
      <description>The common patterns There are recurrent patterns, which has been captured in familiar &amp;ldquo;standard&amp;rdquo; abstractions.
Monoid A Set along with a composition operation, which has an identity element.
addition, for (+) identity is 0 concatenation, which is a specialization of putting together, identity is &amp;quot;&amp;quot;. List, a fundamental recursive sum-type, identity is [] Option, a specialization of empty/non-empty aspect of a List, identity is None Boolean logic, very subtle, identity is False (false imply nothing) The notion that some Boolean operations form a Monoid is very subtle, but it will emerge with conditional expressions.</description>
    </item>
    
    <item>
      <title>Understanding Rust</title>
      <link>https://lngnmn2.github.io/articles/unrestanding-rust/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 +0545</pubDate>
      
      <guid>https://lngnmn2.github.io/articles/unrestanding-rust/</guid>
      <description>The Rust programming language has been hyped as a system programming language, which implies that it has to have an explicit &amp;ldquo;access&amp;rdquo; to the hardware-level abstractions, such as the Stack, the Heap and the Procedures, together with the operating system-level abstractions, such as following the particular calling conventions (a set of standardized interfaces) for an &amp;ldquo;arch and OS /duo&amp;rdquo;, and to be &amp;ldquo;aware of&amp;rdquo; the ABIs in general.
Overview Rust is, in principle, an imperative language.</description>
    </item>
    
    <item>
      <title>The simplest self-publishing workflow</title>
      <link>https://lngnmn2.github.io/articles/the-simplest-workflow/</link>
      <pubDate>Thu, 13 Jul 2023 00:00:00 +0545</pubDate>
      
      <guid>https://lngnmn2.github.io/articles/the-simplest-workflow/</guid>
      <description>Overview This is the simplest but smart self-publishing workflow.
org-mode -&amp;gt; ox_hugo -&amp;gt; hugo -&amp;gt; static html -&amp;gt; git commit -a -&amp;gt; git push -&amp;gt; github pages
Everything is according to the universal principles of being almost &amp;ldquo;pure functional transformations&amp;rdquo; of a structured and decorated text, together with version control, which provides sort of immutability (of the previous versions).
At each stage or step we delegate some aspect to an appropriate external vendored tool.</description>
    </item>
    
  </channel>
</rss>
